package bootstrap

import (
	"context"
	"fmt"
	"github.com/dapr/go-sdk/actor"
	"github.com/dapr/go-sdk/examples/actor/api"
	dapr "github.com/dapr/go-sdk/client"
)

type CoreActor struct {
	actor.ServerImplBase
	daprClient dapr.Client
	abc string

}

func ( *CoreActor) ReminderCall(string, []byte, string, string) {
	fmt.Println("reminder")
}

func (*CoreActor) Type() string {
	return "core"
}
// user defined functions
func (t *CoreActor) StopTimer(ctx context.Context, req *api.TimerRequest) error {
	return t.daprClient.UnregisterActorTimer(ctx, &dapr.UnregisterActorTimerRequest{
		ActorType: t.Type(),
		ActorID:   t.ID(),
		Name:      req.TimerName,
	})
}

func (t *CoreActor) StartTimer(ctx context.Context, req *api.TimerRequest) error {
	return t.daprClient.RegisterActorTimer(ctx, &dapr.RegisterActorTimerRequest{
		ActorType: t.Type(),
		ActorID:   t.ID(),
		Name:      req.TimerName,
		DueTime:   req.Duration,
		Period:    req.Period,
		Data:      []byte(req.Data),
		CallBack:  req.CallBack,
	})
}

func (t *CoreActor) StartReminder(ctx context.Context, req *api.ReminderRequest) error {
	return t.daprClient.RegisterActorReminder(ctx, &dapr.RegisterActorReminderRequest{
		ActorType: t.Type(),
		ActorID:   t.ID(),
		Name:      req.ReminderName,
		DueTime:   req.Duration,
		Period:    req.Period,
		Data:      []byte(req.Data),
	})
}

func (t *CoreActor) StopReminder(ctx context.Context, req *api.ReminderRequest) error {
	return t.daprClient.UnregisterActorReminder(ctx, &dapr.UnregisterActorReminderRequest{
		ActorType: t.Type(),
		ActorID:   t.ID(),
		Name:      req.ReminderName,
	})
}

func (t *CoreActor) Invoke1(ctx context.Context, req string) (string, error) {
	fmt.Println("get req = ", req)
	fmt.Println(t.ID(), t.abc)
	t.abc = req
	t.SaveState()
	fmt.Println(t.abc)

	t.daprClient.InvokeActor()
	return req, nil
}

func coreActorFactory() actor.Server {

	client, err := dapr.NewClient()
	if err != nil {
		panic(err)
	}
	return &CoreActor{
		daprClient: client,
	}
}


func (this *Server) actor() {
	this.daprService.RegisterActorImplFactory(coreActorFactory)
}

